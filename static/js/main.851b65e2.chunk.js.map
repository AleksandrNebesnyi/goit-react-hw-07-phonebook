{"version":3,"sources":["redux/contact/contacts-sliceApi.js","redux/contact/contacts-actions.js","redux/contact/contacts-reducer.js","redux/store.js","components/Container/Container.styled.js","components/Container/Container.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","redux/contact/contacts-selector.js","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactsFilter/ContactsFilter.styled.js","components/ContactsFilter/ContactsFilter.jsx","App.js","index.js"],"names":["contactApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","builder","fetchContacts","query","providesTags","deleteContact","mutation","contactId","url","method","invalidatesTags","createContact","name","phone","body","useFetchContactsQuery","useDeleteContactMutation","useCreateContactMutation","changeFilter","createAction","filterReduser","createReducer","_","payload","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","filter","devTools","process","setupListeners","dispatch","MainContainer","styled","div","Container","children","BoxSection","Title","h1","Section","title","defaultProps","Form","form","Label","label","Input","input","Button","button","ContactForm","useState","setName","setPhone","contacts","data","isLoading","handleChange","event","target","value","resetForm","onSubmit","preventDefault","normalizedContact","toLowerCase","find","contact","toast","error","success","type","placeholder","onChange","pattern","required","disabled","getFilter","state","List","ul","Item","li","Name","span","Number","a","LoaderStyled","Loader","height","width","color","ContactItem","id","isDeleting","href","onClick","ContactList","isFetching","useSelector","shallowEqual","useEffect","includes","map","ContactsFilter","useDispatch","currentTarget","App","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.851b65e2.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const contactApi = createApi({\r\n  reducerPath: 'contactApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://61fb809f87801d0017a2c527.mockapi.io',\r\n  }),\r\n  tagTypes: ['Contact'],\r\n  endpoints: builder => ({\r\n    fetchContacts: builder.query({\r\n      query: () => '/contacts',\r\n      providesTags: ['Contact'],\r\n    }),\r\n    deleteContact: builder.mutation({\r\n      query: contactId => ({\r\n        url: `/contacts/${contactId}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n    createContact: builder.mutation({\r\n      query: (name, phone) => ({\r\n        url: '/contacts',\r\n        method: 'POST',\r\n        body: {\r\n          name,\r\n          phone,\r\n        },\r\n      }),\r\n      invalidatesTags: ['Contact'],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useFetchContactsQuery,\r\n  useDeleteContactMutation,\r\n  useCreateContactMutation,\r\n} = contactApi;\r\n","import { createAction } from '@reduxjs/toolkit'; // Импорт функции создания экшена\n\n// Создание экшена для фильтра\n\nexport const changeFilter = createAction('contacts/change-filter');\n","import { createReducer } from '@reduxjs/toolkit'; // Импорт функции создания редюсера\nimport { changeFilter } from './contacts-actions';\n\n// Создание редюсера для фильтра в контактах\nconst filterReduser = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\n// Экспорт  редюсера\nexport default filterReduser;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; // Импорт функции создания хранилища и прослойки\n// import logger from 'redux-logger';\nimport { contactApi } from './contact/contacts-sliceApi';\n\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'; // Импорт функции персистеров и фикса консоли\n\nimport filterReduser from './contact/contacts-reducer';\n\n// Создание прослоек + логгер. Важен порядок!\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n  contactApi.middleware,\n];\n\n// Создание хранилища (корневой редюсер + прослойки + тулзы только для разработки)\nconst store = configureStore({\n  reducer: {\n    filter: filterReduser,\n    [contactApi.reducerPath]: contactApi.reducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nsetupListeners(store.dispatch);\n\n// Экспорт хранилища\n\nexport default store;\n","import styled from \"@emotion/styled\";\n\n\nexport const MainContainer = styled.div`\nmax-width: 1440px;\nmargin-left: auto;\nmargin-right: auto;\npadding-left: 15px;\npadding-right: 15px;\n`; ","\nimport {MainContainer} from './Container.styled'\n\n\nconst Container = ({ children }) => <MainContainer>{children}</MainContainer>;\n\nexport default Container;","\nimport styled from \"@emotion/styled\";\n\nexport const BoxSection = styled.div `\npadding: 15px;\ntext-align: center;\n`;\nexport const Title = styled.h1`\nmargin-bottom: 15px;\n`;","import PropTypes from 'prop-types';\nimport { BoxSection, Title } from './Section.styled';\n\nconst Section = ({ title, children}) => {\n    return (\n      <BoxSection >\n        <Title>{title}</Title>\n        {children}\n      </BoxSection>\n    );\n  };\n\n\n\n  Section.defaultProps = {\n    title: '',\n   \n  };\n  \n  Section.propTypes = {\n    title: PropTypes.string.isRequired ,\n    children: PropTypes.node,\n  };\n\nexport default Section;","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\nwidth: 100%;\nmargin-right: auto;\nmargin-left: auto;\nmargin-bottom: 15px;\npadding: 15px;\nborder: 1px solid #d4d4d4;\n`;\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\n\nmargin-bottom: 15px;\n\ncolor: #333232;\n`;\nexport const Input = styled.input`\npadding: 11px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\n\ncursor: pointer;\n\n&:focus {\n    outline: transparent;\n    border: 1px solid #2196f3;\n}\n`;\nexport const Button = styled.button`\nmin-width: 150px;\n  height: 40px;\n  border: 0px solid transparent;\n  border-radius: 4px;\n\n  color: #fff;\n  background-color: #2196f3;\n\n  box-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n\n  opacity: 1;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    opacity: 0.8;\n\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`;","import { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { Form, Label, Input, Button } from './ContactForm.styled'; //Стили\r\nimport {\r\n  useFetchContactsQuery,\r\n  useCreateContactMutation,\r\n} from 'redux/contact/contacts-sliceApi';\r\n\r\nconst ContactForm = () => {\r\n  // Локальный стейт контакта\r\n  const [name, setName] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n\r\n  const { data: contacts } = useFetchContactsQuery();\r\n\r\n  const [createContact, { isLoading }] = useCreateContactMutation();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'phone':\r\n        setPhone(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  // Метод на отправке формы. Формирует из локального стейта контакт и передает на бэкенд.\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    // Проверка на дубликат\r\n    const normalizedContact = name.toLowerCase();\r\n    const duplicateName = contacts.find(\r\n      contact => contact.name.toLowerCase() === normalizedContact,\r\n    );\r\n\r\n    if (duplicateName) {\r\n      toast.error(`${name} is already in contact list`);\r\n      resetForm();\r\n      return;\r\n    }\r\n\r\n    createContact(name, phone);\r\n    toast.success(`${name} is added to the contact list!`);\r\n    resetForm();\r\n  };\r\n\r\n  // Сброс полей формы (после отправки)\r\n  const resetForm = () => {\r\n    setName('');\r\n    setPhone('');\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Label>\r\n        Name\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Contact name\"\r\n          aria-label=\"Input for your name\"\r\n          value={name} // Пишем значение в стейт\r\n          onChange={handleChange} // Наблюдающий метод\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n        />\r\n      </Label>\r\n      <Label>\r\n        Number\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"phone\"\r\n          placeholder=\"Phone number\"\r\n          aria-label=\"Input for your phone number\"\r\n          value={phone} // Пишем значение в стейт\r\n          onChange={handleChange} // Наблюдающий метод\r\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n          required\r\n        />\r\n      </Label>\r\n\r\n      <Button type=\"submit\" disabled={isLoading}>\r\n        Add contact\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","// селектор получения части стейта хранящего значение фильтра\r\nexport const getFilter = state => state.filter;\r\n","import styled from '@emotion/styled';\n\n\nexport const List = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\n\nmargin-left: -15px;\nmargin-top: -15px;\n\n`;","import styled from '@emotion/styled';\n\n \nexport const Item = styled.li `\ndisplay: flex;\njustify-content: space-around;\n\nflex-basis: calc(100% / 1 - 15px);\npadding: 15px 5px;\nborder: 1px solid #d4d4d4;\n\ntext-align: center;\n\nmargin-left: 15px;\nmargin-top: 15px\n\n\n`; \n export const Name = styled.span `\n color: #333232;\n  font-weight: 500;\n `; \n\n\nexport const Number = styled.a`\nmargin-right: 15px;\n\ncolor: #000000;\n\nfont-weight: 700;\ntext-decoration: none;\n\ntransition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n&:hover,\n  &:focus {\n    color: #2196f3;\n    transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`; \n\nexport const Button = styled.button`min-width: 50px;\nheight: 30px;\nborder: 0px solid transparent;\nborder-radius: 4px;\n\ncolor: #fff;\nbackground-color: #86888a;\n\nbox-shadow: 0px 4px 4px rgb(0 0 0 / 15%);\n\nopacity: 1;\n\ntransition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\ncursor: pointer;\n\n\n&:hover,\n&:focus {\n\n    opacity: 0.8;\n    background-color: #2196f3;\n    transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n`\n;","import styled from '@emotion/styled';\r\n\r\nexport const LoaderStyled = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  /* display: grid;\r\n  place-content: center; */\r\n`;\r\n","import { TailSpin } from 'react-loader-spinner';\r\nimport { LoaderStyled } from './Loader.styled';\r\n\r\nconst Loader = ({ height, width }) => {\r\n  return (\r\n    <LoaderStyled>\r\n      <TailSpin color=\"#02be6e\" height={height} width={width} />\r\n    </LoaderStyled>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n\r\n// TailSpin color=\"#00BFFF\" height={80} width={80}\r\n","import PropTypes from 'prop-types';\nimport { Item, Name, Number, Button } from './ContactItem.styled';\nimport { useDeleteContactMutation } from 'redux/contact/contacts-sliceApi';\nimport Loader from '../Loader/Loader';\n\n// Принимает один контакт и метод для удаления контакта\n\nconst ContactItem = ({ contact }) => {\n  const { name, phone, id } = contact;\n  const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation();\n\n  return (\n    <Item>\n      <Name>{name}: </Name>\n      <Number href={`tel:${phone}`}>{phone}</Number>\n      <Button\n        type=\"button\"\n        // Метод на клике, принимает ID контакта\n        onClick={() => deleteContact(id)}\n        disabled={isDeleting}\n      >\n        {isDeleting && <Loader height={20} width={20} />}\n        Delete\n      </Button>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  phone: PropTypes.string,\n};\n\nexport default ContactItem;\n","import { useSelector, shallowEqual } from 'react-redux'; // Импортируем хуки для использования стейта и доставки экшинов прямо в компоненте\r\nimport { getFilter } from 'redux/contact/contacts-selector'; // Импортируем части стейта из selector\r\nimport { useEffect } from 'react';\r\nimport { List } from './ContactList.styled'; //Стили\r\nimport ContactItem from '../ContactItem/ContactItem'; //Компонент одного контакта\r\nimport { useFetchContactsQuery } from 'redux/contact/contacts-sliceApi';\r\nimport Loader from '../Loader/Loader';\r\nimport { toast } from 'react-toastify';\r\n// Принимает все отфильтрованные контакты и пробрасывает дальше метод для удаления контакта\r\n\r\nconst ContactList = () => {\r\n  const { data: contacts, isFetching, error } = useFetchContactsQuery();\r\n  const filter = useSelector(getFilter, shallowEqual);\r\n\r\n  useEffect(() => {\r\n    if (error) toast.error(` Error loading contact `);\r\n  }, [error]);\r\n\r\n  const filteredContacts = () => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <List>\r\n      {contacts &&\r\n        filteredContacts().map(contact => (\r\n          <ContactItem key={contact.id} contact={contact} />\r\n        ))}\r\n      {isFetching && <Loader height={100} width={100} />}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import styled  from \"@emotion/styled\";\n\nexport const Form=styled.form\n`\n\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nwidth: 300px;\npadding-bottom: 30px;\n\n`;\n\n\n\nexport const Label = styled.label \n`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n\nmargin-bottom: 15px;\n\ncolor: #333232;\n`;\n\n\nexport const Input=styled.input\n`\nwidth: 100%;\npadding: 11px;\nborder: 1px solid rgba(33, 33, 33, 0.2);\nborder-radius: 4px;\ntransition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\ncursor: pointer;\n\n&:focus {\n  outline: transparent;\n  border: 1px solid #2196f3;\n};\n\n`;","import { useSelector, useDispatch } from 'react-redux'; // Импортируем хуки для использования стейта и доставки экшинов прямо в компоненте\r\nimport { changeFilter } from 'redux/contact/contacts-actions'; // Импортируем экшны для диспатча\r\nimport { getFilter } from 'redux/contact/contacts-selector'; // Импортируем части стейта из selector\r\nimport { Form, Label, Input } from './ContactsFilter.styled';\r\nimport PropTypes from 'prop-types'; //Стили\r\n\r\n// Принимает значение с поля фильтра и метод пишущий в стейт\r\n\r\nconst ContactsFilter = () => {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Form>\r\n        <Label>\r\n          <h3>Find contacts by name:</h3>\r\n          <Input\r\n            type=\"text\"\r\n            value={filter}\r\n            onChange={event =>\r\n              dispatch(changeFilter(event.currentTarget.value))\r\n            }\r\n          />\r\n        </Label>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\nContactsFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\nexport default ContactsFilter;\r\n","import Container from 'components/Container/Container.jsx';\nimport Section from 'components/Section/Section.jsx';\nimport ContactForm from 'components/ContactForm/ContactForm.jsx';\nimport ContactList from 'components/ContactList/ContactList.jsx';\nimport ContactsFilter from 'components/ContactsFilter/ContactsFilter.jsx';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst App = () => {\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <ContactsFilter />\n        <ContactList />\n      </Section>\n\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={3000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </Container>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}